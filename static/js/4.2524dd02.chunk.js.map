{"version":3,"sources":["pages/hill/Matrix.jsx","pages/hill/useMatrixState.js","pages/hill/hillCipher.js","pages/hill/Hill.jsx"],"names":["tdCss","css","centeredInputCss","matrixContainerCss","isPhone","Matrix","rows","changeValue","error","helperText","handleChangeField","row","column","e","onlyNumbers","Number","target","value","replace","useInput","theme","useTheme","useMediaQuery","breakpoints","down","Box","mb","p","mt","flexDirection","display","alignContent","justifyItems","justifyContent","position","className","map","i","field","j","TextField","variant","size","onChange","Typography","align","FormHelperText","defaultMatrix","Array","fill","useMatrixState","defaultMatrixArr","_defaultMatrix","useState","setRows","length","setValue","rowNum","columnNum","resize","newWidth","newWidthNumber","clamp","require","modMatrix","matrix","newMatrix","data","mod","getInvertedMatrix","keyMatrix","det","determinant","detModuloed","inverse","modInverse","adjugate","scale","willKeyWork","a","b","doubleInvertedKey","JSON","stringify","matrixFromString","word","matrixWidth","matrixHeight","Math","ceil","width","height","arr","subArray","push","getZeroesMatrix","letters","split","forEach","c","floor","col","getCode","getArrayFromMatrix","from","methods","multiplySignCss","equalsSignCss","Hill","setWord","method","setMethod","isDecryptWithInverted","isDecryptWithoutInverted","isAnyDecrypt","isEncrypt","wordMatrix","useMemo","isKeyMatrixOk","numRows","numColumns","result","multiply","invertedKey","resultMatrixBeforeMod","parse","resultMatrix","hillEncrypt","v","getLetter","join","matrixArrayToString","changeWord","event","showResultAfterMod","setShowResultAfterMod","invertedKeyMatrix","PaperTitle","title","gutterBottom","Grid","container","item","xs","sm","md","FormControl","fullWidth","Select","MenuItem","id","Slider","getAriaValueText","text","aria-labelledby","valueLabelDisplay","step","marks","min","max","label","flat","disabled","style","FormControlLabel","control","Switch","checked","onClick","color","WordAndSolution","startStr","endStr","KryptoTable","isEncryption"],"mappings":"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","file":"static/js/4.2524dd02.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport {\r\n\tTypography,\r\n\tBox,\r\n\tFormControl,\r\n\tInputLabel,\r\n\tSelect,\r\n\tMenuItem,\r\n\tuseMediaQuery,\r\n\tuseTheme,\r\n} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport { css } from '@emotion/css';\r\n\r\nconst tdCss = css`\r\n\theight: 42px;\r\n\twidth: 4rem;\r\n`;\r\n\r\nconst centeredInputCss = css`\r\n\t* {\r\n\t\ttext-align: center; !important\r\n\t}\r\n`;\r\n\r\nconst matrixContainerCss = (isPhone) => css`\r\n\t&::before {\r\n\t\tcontent: '';\r\n\t\tposition: absolute;\r\n\t\ttop: ${isPhone ? 0.5 : 1}rem;\r\n\t\tleft: ${isPhone ? 0.1 : 1}rem;\r\n\t\theight: calc(100% - ${isPhone ? 1 : 2}rem);\r\n\t\twidth: 0.8rem;\r\n\t\tborder: 1px solid black;\r\n\t\tborder-right: none;\r\n\t}\r\n\t&::after {\r\n\t\tcontent: '';\r\n\t\tposition: absolute;\r\n\t\ttop: ${isPhone ? 0.5 : 1}rem;\r\n\t\tright: ${isPhone ? 0.1 : 1}rem;\r\n\t\theight: calc(100% - ${isPhone ? 1 : 2}rem);\r\n\t\twidth: 0.8rem;\r\n\t\tborder: 1px solid black;\r\n\t\tborder-left: none;\r\n\t}\r\n`;\r\n\r\nfunction Matrix({ rows, changeValue, error, helperText }) {\r\n\tconst handleChangeField = (row, column) => (e) => {\r\n\t\tif (changeValue) {\r\n\t\t\tconst onlyNumbers = Number(e.target.value.replace(/\\D/g, ''));\r\n\t\t\tchangeValue(onlyNumbers, row, column);\r\n\t\t}\r\n\t};\r\n\r\n\tconst useInput = !!changeValue;\r\n\r\n\tconst theme = useTheme();\r\n\tconst isPhone = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box\r\n\t\t\t\tmb={3}\r\n\t\t\t\tp={isPhone ? 0.5 : 2}\r\n\t\t\t\tmt={0}\r\n\t\t\t\tflexDirection='column'\r\n\t\t\t\tdisplay='flex'\r\n\t\t\t\talignContent='center'\r\n\t\t\t\tjustifyItems='center'\r\n\t\t\t\tjustifyContent='center'\r\n\t\t\t\tposition='relative'\r\n\t\t\t>\r\n\t\t\t\t<table className={matrixContainerCss(isPhone)}>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{rows?.map((row, i) => (\r\n\t\t\t\t\t\t\t<tr key={i}>\r\n\t\t\t\t\t\t\t\t{row.map((field, j) => (\r\n\t\t\t\t\t\t\t\t\t<td className={tdCss} key={j}>\r\n\t\t\t\t\t\t\t\t\t\t{useInput ? (\r\n\t\t\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={field}\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\t\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={centeredInputCss}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleChangeField(i, j)}\r\n\t\t\t\t\t\t\t\t\t\t\t\terror={error}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography align='center'>{field}</Typography>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<FormHelperText error={!!helperText}>{helperText}</FormHelperText>\r\n\t\t\t</Box>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Matrix;\r\n","import { useState } from 'react';\r\nimport clamp from 'clamp';\r\n\r\nconst defaultMatrix = (size) => Array(size).fill(Array(size).fill(0));\r\n\r\nconst useMatrixState = (defaultMatrixArr) => {\r\n\tconst _defaultMatrix = defaultMatrixArr || defaultMatrix(3);\r\n\tconst [rows, setRows] = useState(_defaultMatrix);\r\n\tconst size = rows.length;\r\n\r\n\tconst setValue = (value, rowNum, columnNum) =>\r\n\t\tsetRows(\r\n\t\t\trows.map((row, i) => row.map((field, j) => (i === rowNum && columnNum === j ? value : field)))\r\n\t\t);\r\n\r\n\tconst resize = (newWidth) => {\r\n\t\t// W teorii 1 powinno działać, ale dekrypcja buguje się jak jest 1x1 klucz\r\n\t\tconst newWidthNumber = clamp(Number(newWidth), 2, 14);\r\n\t\tsetRows(defaultMatrix(newWidthNumber));\r\n\t};\r\n\r\n\treturn { rows, setValue, size, resize };\r\n};\r\n\r\nexport default useMatrixState;\r\n","import { useState } from 'react';\r\nimport clamp from 'clamp';\r\n\r\nimport { mod, modInverse } from 'utils/numHelpers';\r\nvar Matrix = require('node-matrices');\r\n\r\nexport const getZeroesMatrix = (width, height) => {\r\n\tconst arr = [];\r\n\tfor (let i = 0; i < height; i++) {\r\n\t\tlet subArray = [];\r\n\t\tfor (let j = 0; j < width; j++) {\r\n\t\t\tsubArray.push(0);\r\n\t\t}\r\n\t\tarr.push(subArray);\r\n\t}\r\n\treturn new Matrix(arr);\r\n};\r\n\r\nexport const modMatrix = (matrix) => {\r\n\tconst newMatrix = new Matrix(matrix.data);\r\n\tfor (let i = 0; i < matrix.data.length; i++) {\r\n\t\tfor (let j = 0; j < matrix.data[i].length; j++) {\r\n\t\t\tmatrix.data[i][j] = mod(matrix.data[i][j], 26);\r\n\t\t}\r\n\t}\r\n\treturn newMatrix;\r\n};\r\n\r\n// This wasnt enough to determine if key is ok\r\nexport const isKeyMatrixInvertable = (keyMatrix) => {\r\n\tconst det = keyMatrix.determinant();\r\n\tconst detModuloed = mod(det, 26);\r\n\tconst inverse = modInverse(detModuloed);\r\n\treturn !!inverse;\r\n};\r\n\r\nexport const getInvertedMatrix = (keyMatrix) => {\r\n\tconst det = keyMatrix.determinant();\r\n\tconst detModuloed = mod(det, 26);\r\n\tconst inverse = modInverse(detModuloed);\r\n\tconst adjugate = keyMatrix.adjugate();\r\n\r\n\tfor (let i = 0; i < adjugate.data.length; i++) {\r\n\t\tfor (let j = 0; j < adjugate.data[i].length; j++) {\r\n\t\t\tif (adjugate.data[i][j] < 0) {\r\n\t\t\t\tadjugate.data[i][j] += 26;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst result = modMatrix(adjugate.scale(inverse));\r\n\r\n\treturn result;\r\n};\r\n\r\nfunction arraysEqual(a, b) {\r\n\treturn JSON.stringify(a) === JSON.stringify(b);\r\n}\r\n\r\nexport const willKeyWork = (keyMatrix) => {\r\n\tconst doubleInvertedKey = getInvertedMatrix(getInvertedMatrix(keyMatrix));\r\n\treturn arraysEqual(keyMatrix.data, doubleInvertedKey.data);\r\n};\r\n","import { useState, useMemo } from 'react';\r\nimport {\r\n    Typography,\r\n    Box,\r\n    FormControl,\r\n    InputLabel,\r\n    Select,\r\n    MenuItem,\r\n    Switch,\r\n    FormControlLabel,\r\n} from '@material-ui/core';\r\nimport { css } from '@emotion/css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { getLetter, getCode } from 'utils/numHelpers';\r\nimport KryptoTable from 'utils/KryptoTable';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport WordAndSolution from 'utils/WordAndSolution';\r\nimport MatrixInput from './Matrix';\r\nimport useMatrixState from 'pages/hill/useMatrixState';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\n\r\nimport {\r\n    getInvertedMatrix,\r\n    modMatrix,\r\n    getZeroesMatrix,\r\n    willKeyWork,\r\n} from './hillCipher';\r\nimport PaperTitle from '../../styled/PaperTitle';\r\nvar Matrix = require('node-matrices');\r\n\r\nconst hillEncrypt = (wordMatrix, keyMatrix, isEncrypt) => {\r\n    if (\r\n        !wordMatrix.numRows() ||\r\n        !wordMatrix.numColumns() ||\r\n        !keyMatrix.numRows() ||\r\n        !keyMatrix.numColumns()\r\n    ) {\r\n        return wordMatrix;\r\n    }\r\n\r\n    let result;\r\n    if (isEncrypt) {\r\n        result = wordMatrix.multiply(keyMatrix);\r\n    } else {\r\n        const invertedKey = getInvertedMatrix(keyMatrix);\r\n        result = wordMatrix.multiply(invertedKey);\r\n    }\r\n    return {\r\n        resultMatrixBeforeMod: JSON.parse(JSON.stringify(result)),\r\n        resultMatrix: modMatrix(result, 26),\r\n    };\r\n};\r\n\r\nconst matrixFromString = (word, matrixWidth) => {\r\n    const matrixHeight = Math.ceil(word.length / matrixWidth);\r\n\r\n    let newMatrix = getZeroesMatrix(matrixWidth, matrixHeight);\r\n    const letters = word.split('');\r\n    if (letters) {\r\n        letters.forEach((c, i) => {\r\n            const row = Math.floor(i / matrixWidth);\r\n            const col = i % matrixWidth;\r\n            newMatrix = newMatrix.replace(row, col, getCode(c));\r\n        });\r\n        return newMatrix;\r\n    } else {\r\n        return null;\r\n    }\r\n};\r\n\r\nconst getArrayFromMatrix = (matrix) =>\r\n    matrix?.data.map((row) => Array.from(row));\r\n\r\nconst matrixArrayToString = (rows) =>\r\n    rows?.map((row) => row.map((v) => getLetter(v)).join('')).join('');\r\n\r\nconst methods = {\r\n    encrypt: 'encrypt',\r\n    decryptWithInverted: 'decrypt-with-inverted',\r\n    decrypt: 'decrypt',\r\n};\r\n\r\nconst multiplySignCss = css`\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 0;\r\n    transform: translate(50%, -50%) scale(0.5);\r\n`;\r\n\r\nconst equalsSignCss = css`\r\n    position: absolute;\r\n    top: 50%;\r\n    right: 0;\r\n    transform: translate(50%, -50%) scale(2.5);\r\n`;\r\n\r\nfunction Hill() {\r\n    const [word, setWord] = useState('telewizor');\r\n    const { rows, setValue, size, resize } = useMatrixState([\r\n        [9, 3, 4],\r\n        [7, 2, 1],\r\n        [6, 5, 8],\r\n        // [25, 24, 17],\r\n        // [14, 24, 3],\r\n        // [5, 19, 5],\r\n    ]);\r\n    const [method, setMethod] = useState(methods.encrypt);\r\n\r\n    // Generalnie isEncrypt wskazuje ze po prostu mnozymy dwie macieze\r\n    const isDecryptWithInverted = method === methods.decryptWithInverted;\r\n    const isDecryptWithoutInverted = method === methods.decrypt;\r\n    const isAnyDecrypt = method !== methods.encrypt;\r\n    const isEncrypt = method === methods.encrypt || isDecryptWithInverted;\r\n\r\n    const wordMatrix = useMemo(\r\n        () => matrixFromString(word, size),\r\n        [word, size]\r\n    );\r\n    const keyMatrix = useMemo(() => new Matrix(rows), [rows]);\r\n\r\n    const isKeyMatrixOk = willKeyWork(keyMatrix);\r\n\r\n    const { resultMatrix, resultMatrixBeforeMod } = useMemo(\r\n        () => hillEncrypt(wordMatrix, keyMatrix, isEncrypt),\r\n        [wordMatrix, keyMatrix, isEncrypt]\r\n    );\r\n    const result = matrixArrayToString(getArrayFromMatrix(resultMatrix));\r\n\r\n    const changeWord = (event) => setWord(event.target.value);\r\n    const changeMethod = (event) => setMethod(event.target.value);\r\n    const handleResize = (e, v) => resize(v);\r\n\r\n    const [showResultAfterMod, setShowResultAfterMod] = useState(true);\r\n    const toggleShowResultAfterMod = () => setShowResultAfterMod((v) => !v);\r\n\r\n    const invertedKeyMatrix =\r\n        isDecryptWithoutInverted && getInvertedMatrix(keyMatrix);\r\n\r\n    return (\r\n        <>\r\n            <PaperTitle title='Explanation' p={2}>\r\n                <Typography gutterBottom>\r\n                    {/*Enkrypcja Hilla polega na pomnożeniu macierzy słowa przez*/}\r\n                    {/*macierz klucza.*/}\r\n                    Hill encryption: Multiply word matrix by key matrix.\r\n                </Typography>\r\n                <Typography gutterBottom>\r\n                    {/*Dekrypcja Hilla polega na pomnożeniu macierzy słowa przez*/}\r\n                    {/*macierz <b>odwróconego</b> klucza.*/}\r\n                    Hill decryption: Multiply word matrix by <b>inverted</b> key\r\n                    matrix.\r\n                </Typography>\r\n            </PaperTitle>\r\n            <PaperTitle title='Inputs'>\r\n                <Grid container>\r\n                    <Grid item xs={0} sm={3} md={4} />\r\n                    <Grid item xs={12} sm={6} md={4}>\r\n                        <Box p={2}>\r\n                            <FormControl fullWidth>\r\n                                <Select\r\n                                    variant='outlined'\r\n                                    value={method}\r\n                                    onChange={changeMethod}\r\n                                >\r\n                                    <MenuItem value={'encrypt'}>\r\n                                        Encrypt\r\n                                    </MenuItem>\r\n                                    <MenuItem value={'decrypt-with-inverted'}>\r\n                                        Decrypt (I have inverted key)\r\n                                    </MenuItem>\r\n                                    <MenuItem value={'decrypt'}>\r\n                                        Decrypt\r\n                                    </MenuItem>\r\n                                </Select>\r\n                            </FormControl>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={0} sm={3} md={4} />\r\n                    <Grid item xs={0} md={3} />\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={2}>\r\n                            <Typography id='input-slider' gutterBottom>\r\n                                Key Matrix size: {size}x{size}\r\n                            </Typography>\r\n                            <Slider\r\n                                value={size}\r\n                                onChange={handleResize}\r\n                                getAriaValueText={(text) => text}\r\n                                aria-labelledby='discrete-slider'\r\n                                valueLabelDisplay='auto'\r\n                                step={1}\r\n                                marks\r\n                                min={2}\r\n                                max={7}\r\n                            />\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={0} md={3} />\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={2}>\r\n                            <TextField\r\n                                fullWidth\r\n                                variant='outlined'\r\n                                label={isAnyDecrypt ? 'Encrypted word' : 'Word'}\r\n                                onChange={changeWord}\r\n                                value={word}\r\n                            />\r\n                            <Grid item xs={12} align='center'>\r\n                                <MatrixInput\r\n                                    rows={getArrayFromMatrix(wordMatrix)}\r\n                                />\r\n                            </Grid>\r\n                        </Box>\r\n                    </Grid>\r\n                    <Grid item xs={12} md={6}>\r\n                        <Box p={2}>\r\n                            <TextField\r\n                                label={\r\n                                    isDecryptWithInverted\r\n                                        ? 'Inverted key:'\r\n                                        : 'Key:'\r\n                                }\r\n                                fullWidth\r\n                                variant='outlined'\r\n                                onChange={changeWord}\r\n                                value={rows.flat().join(',')}\r\n                                disabled\r\n                            />\r\n                            <Grid item xs={12} align='center'>\r\n                                <MatrixInput\r\n                                    rows={rows}\r\n                                    changeValue={setValue}\r\n                                    error={!isKeyMatrixOk}\r\n                                    helperText={\r\n                                        !isKeyMatrixOk\r\n                                            ? 'Inverting this matrix twice returns different matrix'\r\n                                            : ''\r\n                                    }\r\n                                />\r\n                            </Grid>\r\n                        </Box>\r\n                    </Grid>\r\n                </Grid>\r\n            </PaperTitle>\r\n            {isDecryptWithoutInverted && (\r\n                <PaperTitle title='Inverted Key' p={2}>\r\n                    <Grid container>\r\n                        <Grid xs={0} md={3} />\r\n                        <Grid xs={12} md={6}>\r\n                            <MatrixInput\r\n                                rows={getArrayFromMatrix(invertedKeyMatrix)}\r\n                            />\r\n                        </Grid>\r\n                        <Grid xs={0} md={3} />\r\n                    </Grid>\r\n                </PaperTitle>\r\n            )}\r\n\r\n            <PaperTitle title='Calculation' p={2}>\r\n                <Grid container>\r\n                    <Grid item xs={4} align='center'>\r\n                        <Typography variant='body1'>\r\n                            {isAnyDecrypt ? 'Encrypted word' : 'Word'}:\r\n                        </Typography>\r\n                        <div style={{ position: 'relative' }}>\r\n                            <MatrixInput\r\n                                rows={getArrayFromMatrix(wordMatrix)}\r\n                            />{' '}\r\n                            <FiberManualRecordIcon\r\n                                className={multiplySignCss}\r\n                            />\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={4} align='center'>\r\n                        <Typography variant='body1'>\r\n                            {isAnyDecrypt ? 'Inverted key' : 'Key'}\r\n                        </Typography>\r\n                        <div style={{ position: 'relative' }}>\r\n                            <MatrixInput\r\n                                rows={\r\n                                    isDecryptWithoutInverted\r\n                                        ? getArrayFromMatrix(invertedKeyMatrix)\r\n                                        : getArrayFromMatrix(keyMatrix)\r\n                                }\r\n                            />\r\n                            <div className={equalsSignCss}>=</div>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={4} align='center'>\r\n                        <Typography variant='body1'>\r\n                            {isAnyDecrypt ? 'Word' : 'Encrypted Word'}:\r\n                        </Typography>\r\n\r\n                        <MatrixInput\r\n                            rows={getArrayFromMatrix(\r\n                                showResultAfterMod\r\n                                    ? resultMatrix\r\n                                    : resultMatrixBeforeMod\r\n                            )}\r\n                        />\r\n                        <FormControlLabel\r\n                            control={\r\n                                <Switch\r\n                                    checked={showResultAfterMod}\r\n                                    onClick={toggleShowResultAfterMod}\r\n                                    color='primary'\r\n                                />\r\n                            }\r\n                            label='After modulo'\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </PaperTitle>\r\n            <PaperTitle title='Solution'>\r\n                <WordAndSolution startStr={word} endStr={result || ''} />\r\n            </PaperTitle>\r\n            <PaperTitle title='Table'>\r\n                <KryptoTable\r\n                    startStr={word}\r\n                    endStr={result}\r\n                    isEncryption={isEncrypt}\r\n                />\r\n            </PaperTitle>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Hill;\r\n"],"sourceRoot":""}