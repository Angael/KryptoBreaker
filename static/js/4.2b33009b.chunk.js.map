{"version":3,"sources":["hill/Matrix.jsx","hill/useMatrixState.js","hill/hillCipher.js","hill/Hill.jsx"],"names":["tdCss","css","centeredInputCss","matrixContainerCss","isPhone","Matrix","rows","changeValue","error","helperText","handleChangeField","row","column","e","onlyNumbers","Number","target","value","replace","useInput","theme","useTheme","useMediaQuery","breakpoints","down","Box","mb","p","mt","flexDirection","display","alignContent","justifyItems","justifyContent","position","className","map","i","field","j","TextField","variant","size","onChange","Typography","align","FormHelperText","defaultMatrix","Array","fill","useMatrixState","defaultMatrixArr","_defaultMatrix","useState","setRows","length","setValue","rowNum","columnNum","resize","newWidth","newWidthNumber","clamp","require","modMatrix","matrix","newMatrix","data","mod","getInvertedMatrix","keyMatrix","det","determinant","detModuloed","inverse","modInverse","adjugate","scale","willKeyWork","a","b","doubleInvertedKey","JSON","stringify","matrixFromString","word","matrixWidth","matrixHeight","Math","ceil","width","height","arr","subArray","push","getZeroesMatrix","letters","split","forEach","c","floor","col","getCode","getArrayFromMatrix","from","methods","multiplySignCss","equalsSignCss","Hill","setWord","method","setMethod","isDecryptWithInverted","isDecryptWithoutInverted","isAnyDecrypt","isEncrypt","wordMatrix","useMemo","isKeyMatrixOk","numRows","numColumns","result","multiply","invertedKey","resultMatrixBeforeMod","parse","resultMatrix","hillEncrypt","v","getLetter","join","matrixArrayToString","showResultAfterMod","setShowResultAfterMod","invertedKeyMatrix","gutterBottom","Grid","container","item","xs","label","event","FormControl","InputLabel","Select","MenuItem","id","Slider","getAriaValueText","text","aria-labelledby","valueLabelDisplay","step","marks","min","max","style","FormControlLabel","control","Switch","checked","onClick","color","WordAndSolution","startStr","endStr","KryptoTable","isEncryption"],"mappings":"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","file":"static/js/4.2b33009b.chunk.js","sourcesContent":["import { useState } from 'react';\r\nimport {\r\n\tTypography,\r\n\tBox,\r\n\tFormControl,\r\n\tInputLabel,\r\n\tSelect,\r\n\tMenuItem,\r\n\tuseMediaQuery,\r\n\tuseTheme,\r\n} from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport FormHelperText from '@material-ui/core/FormHelperText';\r\n\r\nimport { css } from '@emotion/css';\r\n\r\nconst tdCss = css`\r\n\theight: 42px;\r\n\twidth: 4rem;\r\n`;\r\n\r\nconst centeredInputCss = css`\r\n\t* {\r\n\t\ttext-align: center; !important\r\n\t}\r\n`;\r\n\r\nconst matrixContainerCss = (isPhone) => css`\r\n\t&::before {\r\n\t\tcontent: '';\r\n\t\tposition: absolute;\r\n\t\ttop: ${isPhone ? 0.5 : 1}rem;\r\n\t\tleft: ${isPhone ? 0.1 : 1}rem;\r\n\t\theight: calc(100% - ${isPhone ? 1 : 2}rem);\r\n\t\twidth: 0.8rem;\r\n\t\tborder: 1px solid black;\r\n\t\tborder-right: none;\r\n\t}\r\n\t&::after {\r\n\t\tcontent: '';\r\n\t\tposition: absolute;\r\n\t\ttop: ${isPhone ? 0.5 : 1}rem;\r\n\t\tright: ${isPhone ? 0.1 : 1}rem;\r\n\t\theight: calc(100% - ${isPhone ? 1 : 2}rem);\r\n\t\twidth: 0.8rem;\r\n\t\tborder: 1px solid black;\r\n\t\tborder-left: none;\r\n\t}\r\n`;\r\n\r\nfunction Matrix({ rows, changeValue, error, helperText }) {\r\n\tconst handleChangeField = (row, column) => (e) => {\r\n\t\tif (changeValue) {\r\n\t\t\tconst onlyNumbers = Number(e.target.value.replace(/\\D/g, ''));\r\n\t\t\tchangeValue(onlyNumbers, row, column);\r\n\t\t}\r\n\t};\r\n\r\n\tconst useInput = !!changeValue;\r\n\r\n\tconst theme = useTheme();\r\n\tconst isPhone = useMediaQuery(theme.breakpoints.down('sm'));\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box\r\n\t\t\t\tmb={3}\r\n\t\t\t\tp={isPhone ? 0.5 : 2}\r\n\t\t\t\tmt={0}\r\n\t\t\t\tflexDirection='column'\r\n\t\t\t\tdisplay='flex'\r\n\t\t\t\talignContent='center'\r\n\t\t\t\tjustifyItems='center'\r\n\t\t\t\tjustifyContent='center'\r\n\t\t\t\tposition='relative'\r\n\t\t\t>\r\n\t\t\t\t<table className={matrixContainerCss(isPhone)}>\r\n\t\t\t\t\t<tbody>\r\n\t\t\t\t\t\t{rows?.map((row, i) => (\r\n\t\t\t\t\t\t\t<tr key={i}>\r\n\t\t\t\t\t\t\t\t{row.map((field, j) => (\r\n\t\t\t\t\t\t\t\t\t<td className={tdCss} key={j}>\r\n\t\t\t\t\t\t\t\t\t\t{useInput ? (\r\n\t\t\t\t\t\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\t\t\t\t\t\tvalue={field}\r\n\t\t\t\t\t\t\t\t\t\t\t\tvariant={'outlined'}\r\n\t\t\t\t\t\t\t\t\t\t\t\tsize='small'\r\n\t\t\t\t\t\t\t\t\t\t\t\tclassName={centeredInputCss}\r\n\t\t\t\t\t\t\t\t\t\t\t\tonChange={handleChangeField(i, j)}\r\n\t\t\t\t\t\t\t\t\t\t\t\terror={error}\r\n\t\t\t\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t\t\t\t\t<Typography align='center'>{field}</Typography>\r\n\t\t\t\t\t\t\t\t\t\t)}\r\n\t\t\t\t\t\t\t\t\t</td>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</tr>\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</tbody>\r\n\t\t\t\t</table>\r\n\t\t\t\t<FormHelperText error={!!helperText}>{helperText}</FormHelperText>\r\n\t\t\t</Box>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Matrix;\r\n","import { useState } from 'react';\r\nimport clamp from 'clamp';\r\n\r\nconst defaultMatrix = (size) => Array(size).fill(Array(size).fill(0));\r\n\r\nconst useMatrixState = (defaultMatrixArr) => {\r\n\tconst _defaultMatrix = defaultMatrixArr || defaultMatrix(3);\r\n\tconst [rows, setRows] = useState(_defaultMatrix);\r\n\tconst size = rows.length;\r\n\r\n\tconst setValue = (value, rowNum, columnNum) =>\r\n\t\tsetRows(\r\n\t\t\trows.map((row, i) => row.map((field, j) => (i === rowNum && columnNum === j ? value : field)))\r\n\t\t);\r\n\r\n\tconst resize = (newWidth) => {\r\n\t\t// W teorii 1 powinno działać, ale dekrypcja buguje się jak jest 1x1 klucz\r\n\t\tconst newWidthNumber = clamp(Number(newWidth), 2, 14);\r\n\t\tsetRows(defaultMatrix(newWidthNumber));\r\n\t};\r\n\r\n\treturn { rows, setValue, size, resize };\r\n};\r\n\r\nexport default useMatrixState;\r\n","import { useState } from 'react';\r\nimport clamp from 'clamp';\r\n\r\nimport { mod, modInverse } from 'utils/numHelpers';\r\nvar Matrix = require('node-matrices');\r\n\r\nexport const getZeroesMatrix = (width, height) => {\r\n\tconst arr = [];\r\n\tfor (let i = 0; i < height; i++) {\r\n\t\tlet subArray = [];\r\n\t\tfor (let j = 0; j < width; j++) {\r\n\t\t\tsubArray.push(0);\r\n\t\t}\r\n\t\tarr.push(subArray);\r\n\t}\r\n\treturn new Matrix(arr);\r\n};\r\n\r\nexport const modMatrix = (matrix) => {\r\n\tconst newMatrix = new Matrix(matrix.data);\r\n\tfor (let i = 0; i < matrix.data.length; i++) {\r\n\t\tfor (let j = 0; j < matrix.data[i].length; j++) {\r\n\t\t\tmatrix.data[i][j] = mod(matrix.data[i][j], 26);\r\n\t\t}\r\n\t}\r\n\treturn newMatrix;\r\n};\r\n\r\n// This wasnt enough to determine if key is ok\r\nexport const isKeyMatrixInvertable = (keyMatrix) => {\r\n\tconst det = keyMatrix.determinant();\r\n\tconst detModuloed = mod(det, 26);\r\n\tconst inverse = modInverse(detModuloed);\r\n\treturn !!inverse;\r\n};\r\n\r\nexport const getInvertedMatrix = (keyMatrix) => {\r\n\tconst det = keyMatrix.determinant();\r\n\tconst detModuloed = mod(det, 26);\r\n\tconst inverse = modInverse(detModuloed);\r\n\tconst adjugate = keyMatrix.adjugate();\r\n\r\n\tfor (let i = 0; i < adjugate.data.length; i++) {\r\n\t\tfor (let j = 0; j < adjugate.data[i].length; j++) {\r\n\t\t\tif (adjugate.data[i][j] < 0) {\r\n\t\t\t\tadjugate.data[i][j] += 26;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tconst result = modMatrix(adjugate.scale(inverse));\r\n\r\n\treturn result;\r\n};\r\n\r\nfunction arraysEqual(a, b) {\r\n\treturn JSON.stringify(a) === JSON.stringify(b);\r\n}\r\n\r\nexport const willKeyWork = (keyMatrix) => {\r\n\tconst doubleInvertedKey = getInvertedMatrix(getInvertedMatrix(keyMatrix));\r\n\treturn arraysEqual(keyMatrix.data, doubleInvertedKey.data);\r\n};\r\n","import { useState, useMemo } from 'react';\r\nimport {\r\n\tTypography,\r\n\tBox,\r\n\tFormControl,\r\n\tInputLabel,\r\n\tSelect,\r\n\tMenuItem,\r\n\tSwitch,\r\n\tFormControlLabel,\r\n} from '@material-ui/core';\r\nimport { css } from '@emotion/css';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { getLetter, getCode } from 'utils/numHelpers';\r\nimport KryptoTable from 'utils/KryptoTable';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport WordAndSolution from 'utils/WordAndSolution';\r\nimport MatrixInput from './Matrix';\r\nimport useMatrixState from 'hill/useMatrixState';\r\nimport Slider from '@material-ui/core/Slider';\r\n\r\nimport FiberManualRecordIcon from '@material-ui/icons/FiberManualRecord';\r\n\r\nimport { getInvertedMatrix, modMatrix, getZeroesMatrix, willKeyWork } from './hillCipher';\r\nvar Matrix = require('node-matrices');\r\n\r\nconst hillEncrypt = (wordMatrix, keyMatrix, isEncrypt) => {\r\n\tif (\r\n\t\t!wordMatrix.numRows() ||\r\n\t\t!wordMatrix.numColumns() ||\r\n\t\t!keyMatrix.numRows() ||\r\n\t\t!keyMatrix.numColumns()\r\n\t) {\r\n\t\treturn wordMatrix;\r\n\t}\r\n\r\n\tlet result;\r\n\tif (isEncrypt) {\r\n\t\tresult = wordMatrix.multiply(keyMatrix);\r\n\t} else {\r\n\t\tconst invertedKey = getInvertedMatrix(keyMatrix);\r\n\t\tresult = wordMatrix.multiply(invertedKey);\r\n\t}\r\n\treturn {\r\n\t\tresultMatrixBeforeMod: JSON.parse(JSON.stringify(result)),\r\n\t\tresultMatrix: modMatrix(result, 26),\r\n\t};\r\n};\r\n\r\nconst matrixFromString = (word, matrixWidth) => {\r\n\tconst matrixHeight = Math.ceil(word.length / matrixWidth);\r\n\r\n\tlet newMatrix = getZeroesMatrix(matrixWidth, matrixHeight);\r\n\tconst letters = word.split('');\r\n\tif (letters) {\r\n\t\tletters.forEach((c, i) => {\r\n\t\t\tconst row = Math.floor(i / matrixWidth);\r\n\t\t\tconst col = i % matrixWidth;\r\n\t\t\tnewMatrix = newMatrix.replace(row, col, getCode(c));\r\n\t\t});\r\n\t\treturn newMatrix;\r\n\t} else {\r\n\t\treturn null;\r\n\t}\r\n};\r\n\r\nconst getArrayFromMatrix = (matrix) => matrix?.data.map((row) => Array.from(row));\r\n\r\nconst matrixArrayToString = (rows) =>\r\n\trows?.map((row) => row.map((v) => getLetter(v)).join('')).join('');\r\n\r\nconst methods = {\r\n\tencrypt: 'encrypt',\r\n\tdecryptWithInverted: 'decrypt-with-inverted',\r\n\tdecrypt: 'decrypt',\r\n};\r\n\r\nconst multiplySignCss = css`\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tright: 0;\r\n\ttransform: translate(50%, -50%) scale(0.5);\r\n`;\r\n\r\nconst equalsSignCss = css`\r\n\tposition: absolute;\r\n\ttop: 50%;\r\n\tright: 0;\r\n\ttransform: translate(50%, -50%) scale(2.5);\r\n`;\r\n\r\nfunction Hill() {\r\n\tconst [word, setWord] = useState('telewizor');\r\n\tconst { rows, setValue, size, resize } = useMatrixState([\r\n\t\t[9, 3, 4],\r\n\t\t[7, 2, 1],\r\n\t\t[6, 5, 8],\r\n\t\t// [25, 24, 17],\r\n\t\t// [14, 24, 3],\r\n\t\t// [5, 19, 5],\r\n\t]);\r\n\tconst [method, setMethod] = useState(methods.encrypt);\r\n\r\n\t// Generalnie isEncrypt wskazuje ze po prostu mnozymy dwie macieze\r\n\tconst isDecryptWithInverted = method === methods.decryptWithInverted;\r\n\tconst isDecryptWithoutInverted = method === methods.decrypt;\r\n\tconst isAnyDecrypt = method !== methods.encrypt;\r\n\tconst isEncrypt = method === methods.encrypt || isDecryptWithInverted;\r\n\r\n\tconst wordMatrix = useMemo(() => matrixFromString(word, size), [word, size]);\r\n\tconst keyMatrix = useMemo(() => new Matrix(rows), [rows]);\r\n\r\n\tconst isKeyMatrixOk = willKeyWork(keyMatrix);\r\n\r\n\tconst { resultMatrix, resultMatrixBeforeMod } = useMemo(\r\n\t\t() => hillEncrypt(wordMatrix, keyMatrix, isEncrypt),\r\n\t\t[wordMatrix, keyMatrix, isEncrypt]\r\n\t);\r\n\tconst result = matrixArrayToString(getArrayFromMatrix(resultMatrix));\r\n\r\n\tconst changeWord = (event) => setWord(event.target.value);\r\n\tconst changeMethod = (event) => setMethod(event.target.value);\r\n\tconst handleResize = (e, v) => resize(v);\r\n\r\n\tconst [showResultAfterMod, setShowResultAfterMod] = useState(true);\r\n\tconst toggleShowResultAfterMod = () => setShowResultAfterMod((v) => !v);\r\n\r\n\tconst invertedKeyMatrix = isDecryptWithoutInverted && getInvertedMatrix(keyMatrix);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box p={2}>\r\n\t\t\t\t<Typography gutterBottom>\r\n\t\t\t\t\tEnkrypcja Hilla polega na pomnożeniu macierzy słowa przez macierz klucza.\r\n\t\t\t\t</Typography>\r\n\t\t\t\t<Typography gutterBottom>\r\n\t\t\t\t\tDekrypcja Hilla polega na pomnożeniu macierzy słowa przez macierz <b>odwróconego</b>{' '}\r\n\t\t\t\t\tklucza.\r\n\t\t\t\t</Typography>\r\n\t\t\t</Box>\r\n\t\t\t<Box p={2}>\r\n\t\t\t\t<Grid container>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<TextField label='word' onChange={changeWord} value={word} />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t<InputLabel>Which way</InputLabel>\r\n\t\t\t\t\t\t\t<Select value={method} onChange={changeMethod}>\r\n\t\t\t\t\t\t\t\t<MenuItem value={'encrypt'}>Encrypt</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem value={'decrypt-with-inverted'}>Decrypt (I have inverted key)</MenuItem>\r\n\t\t\t\t\t\t\t\t<MenuItem value={'decrypt'}>Decrypt</MenuItem>\r\n\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Box>\r\n\t\t\t<Box p={2}>\r\n\t\t\t\t<Grid container>\r\n\t\t\t\t\t<Grid item xs={6}></Grid>\r\n\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t<Typography id='input-slider' gutterBottom>\r\n\t\t\t\t\t\t\tMatrix size\r\n\t\t\t\t\t\t</Typography>\r\n\t\t\t\t\t\t<Slider\r\n\t\t\t\t\t\t\tvalue={size}\r\n\t\t\t\t\t\t\tonChange={handleResize}\r\n\t\t\t\t\t\t\tgetAriaValueText={(text) => text}\r\n\t\t\t\t\t\t\taria-labelledby='discrete-slider'\r\n\t\t\t\t\t\t\tvalueLabelDisplay='auto'\r\n\t\t\t\t\t\t\tstep={1}\r\n\t\t\t\t\t\t\tmarks\r\n\t\t\t\t\t\t\tmin={2}\r\n\t\t\t\t\t\t\tmax={7}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Box>\r\n\t\t\t<Box p={2}>\r\n\t\t\t\t<Grid container>\r\n\t\t\t\t\t<Grid item xs={6} align='center'>\r\n\t\t\t\t\t\t<Typography variant='h4'>{isAnyDecrypt ? 'Encrypted word' : 'Word'}:</Typography>\r\n\t\t\t\t\t\t<MatrixInput rows={getArrayFromMatrix(wordMatrix)} />\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={6} align='center'>\r\n\t\t\t\t\t\t<Typography variant='h4'>{isDecryptWithInverted ? 'Inverted key:' : 'Key:'}</Typography>\r\n\t\t\t\t\t\t<MatrixInput\r\n\t\t\t\t\t\t\trows={rows}\r\n\t\t\t\t\t\t\tchangeValue={setValue}\r\n\t\t\t\t\t\t\terror={!isKeyMatrixOk}\r\n\t\t\t\t\t\t\thelperText={\r\n\t\t\t\t\t\t\t\t!isKeyMatrixOk ? 'Inverting this matrix twice returns different matrix' : ''\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t{isDecryptWithoutInverted && (\r\n\t\t\t\t\t\t<>\r\n\t\t\t\t\t\t\t<Grid item xs={6}></Grid>\r\n\t\t\t\t\t\t\t<Grid item xs={6} align='center'>\r\n\t\t\t\t\t\t\t\t<Typography variant='h4'>Inverted Key:</Typography>\r\n\t\t\t\t\t\t\t\t<MatrixInput rows={getArrayFromMatrix(invertedKeyMatrix)} />\r\n\t\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t</>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Grid>\r\n\t\t\t\t<Box p={2} align='center'>\r\n\t\t\t\t\t<Typography variant='h3'>Calculation:</Typography>\r\n\t\t\t\t</Box>\r\n\t\t\t\t<Grid container>\r\n\t\t\t\t\t<Grid item xs={4} align='center'>\r\n\t\t\t\t\t\t<Typography variant='body1'>{isAnyDecrypt ? 'Encrypted word' : 'Word'}:</Typography>\r\n\t\t\t\t\t\t<div style={{ position: 'relative' }}>\r\n\t\t\t\t\t\t\t<MatrixInput rows={getArrayFromMatrix(wordMatrix)} />{' '}\r\n\t\t\t\t\t\t\t<FiberManualRecordIcon className={multiplySignCss} />\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={4} align='center'>\r\n\t\t\t\t\t\t<Typography variant='body1'>{isAnyDecrypt ? 'Inverted key' : 'Key'}</Typography>\r\n\t\t\t\t\t\t<div style={{ position: 'relative' }}>\r\n\t\t\t\t\t\t\t<MatrixInput\r\n\t\t\t\t\t\t\t\trows={\r\n\t\t\t\t\t\t\t\t\tisDecryptWithoutInverted\r\n\t\t\t\t\t\t\t\t\t\t? getArrayFromMatrix(invertedKeyMatrix)\r\n\t\t\t\t\t\t\t\t\t\t: getArrayFromMatrix(keyMatrix)\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<div className={equalsSignCss}>=</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Grid item xs={4} align='center'>\r\n\t\t\t\t\t\t<Typography variant='body1'>{isAnyDecrypt ? 'Word' : 'Encrypted Word'}:</Typography>\r\n\r\n\t\t\t\t\t\t<MatrixInput\r\n\t\t\t\t\t\t\trows={getArrayFromMatrix(showResultAfterMod ? resultMatrix : resultMatrixBeforeMod)}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t<FormControlLabel\r\n\t\t\t\t\t\t\tcontrol={\r\n\t\t\t\t\t\t\t\t<Switch\r\n\t\t\t\t\t\t\t\t\tchecked={showResultAfterMod}\r\n\t\t\t\t\t\t\t\t\tonClick={toggleShowResultAfterMod}\r\n\t\t\t\t\t\t\t\t\tcolor='primary'\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tlabel='After modulo'\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t</Grid>\r\n\t\t\t</Box>\r\n\t\t\t<Box p={2}>\r\n\t\t\t\t<Typography variant='h4'>Solution:</Typography>\r\n\t\t\t\t<WordAndSolution startStr={word} endStr={result || ''} />\r\n\t\t\t</Box>\r\n\t\t\t<Box p={2}>\r\n\t\t\t\t<Typography variant='h4'>Table:</Typography>\r\n\t\t\t\t<KryptoTable startStr={word} endStr={result} isEncryption={isEncrypt} />\r\n\t\t\t</Box>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Hill;\r\n"],"sourceRoot":""}