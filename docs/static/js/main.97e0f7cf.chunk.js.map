{"version":3,"sources":["utils/numHelpers.js","utils/KryptoTable.jsx","utils/WordAndSolution.jsx","utils/line-for-letter/LineForLetter.jsx","cezar/SolutionPerChar.jsx","cezar/Cezar.jsx","vigener/SolutionPerChar.jsx","vigener/Vigener.jsx","afiniczny/SolutionPerChar.jsx","afiniczny/AfinicznyKluczLiczenie.jsx","afiniczny/Afiniczny.jsx","App.jsx","index.js"],"names":["mod","n","m","modInverse","a","x","getCode","letter","toLowerCase","charCodeAt","getLetter","code","String","fromCharCode","KryptoTable","startStr","endStr","middleNumbersArr","isEncryption","startRow","TableRow","TableCell","component","scope","split","map","v","i","align","startNumbers","endNumbers","endRow","middleRow","TableContainer","props","Paper","variant","Table","TableBody","WordAndSolution","boxCenterProps","display","justifyContent","alignItems","Card","Box","p","flex","Typography","LineForLetter","resultLetter","children","fontSize","SolutionPerChar","key","keyValue","isEncr","letterCode","letterAndCode","afterMod","Cezar","useState","word","setWord","setKey","isEncrypt","setIsEncrypt","result","crypted","newKey","parseInt","c","cezarEncrypt","my","elevation","Grid","container","item","xs","TextField","label","onChange","event","target","value","FormControl","InputLabel","Select","MenuItem","type","Number","keyCode","letterAndKey","Vigener","length","k","vigenerEncrypt","middleTableRow","useMemo","arr","forEach","push","calculationJsx","b","invertedA","NaN","AfinicznyKluczLiczenie","num","results","getStepsForInverseKey","step","Afiniczny","keys","setKeys","replace","undefined","isEncode","affine","e","placeholder","methods","App","method","setMetod","Container","maxWidth","alignContent","justifyItems","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.97e0f7cf.chunk.js","sourcesContent":["export function mod(n, m = 26) {\r\n\treturn ((n % m) + m) % m;\r\n}\r\n\r\n// odwrotnosc modularna\r\nexport const modInverse = (a, m) => {\r\n\tfor (let x = 1; x < m; x++) if (((a % m) * (x % m)) % m == 1) return x;\r\n};\r\n\r\nexport const getCode = (letter) => letter.toLowerCase().charCodeAt(0) - 97;\r\nexport const getLetter = (code) => String.fromCharCode(mod(code, 26) + 97);\r\n","import { useState } from 'react';\nimport { Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { getLetter, getCode } from 'utils/numHelpers';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nfunction KryptoTable({ startStr = '', endStr = '', middleNumbersArr, isEncryption = true }) {\n\tconst startRow = (\n\t\t<TableRow>\n\t\t\t<TableCell component='th' scope='row'>\n\t\t\t\t{isEncryption ? 'PT' : 'CT'}\n\t\t\t</TableCell>\n\t\t\t{startStr.split('').map((v, i) => (\n\t\t\t\t<TableCell key={v + i} align='center'>\n\t\t\t\t\t{v}\n\t\t\t\t</TableCell>\n\t\t\t))}\n\t\t</TableRow>\n\t);\n\n\tconst startNumbers = (\n\t\t<TableRow>\n\t\t\t<TableCell component='th' scope='row'>\n\t\t\t\t{isEncryption ? 'x' : 'y'}\n\t\t\t</TableCell>\n\t\t\t{startStr.split('').map((v, i) => (\n\t\t\t\t<TableCell key={v + i} align='center'>\n\t\t\t\t\t{getCode(v)}\n\t\t\t\t</TableCell>\n\t\t\t))}\n\t\t</TableRow>\n\t);\n\n\tconst endNumbers = (\n\t\t<TableRow>\n\t\t\t<TableCell component='th' scope='row'>\n\t\t\t\t{isEncryption ? 'y' : 'x'}\n\t\t\t</TableCell>\n\t\t\t{endStr.split('').map((v, i) => (\n\t\t\t\t<TableCell key={v + i} align='center'>\n\t\t\t\t\t{getCode(v)}\n\t\t\t\t</TableCell>\n\t\t\t))}\n\t\t</TableRow>\n\t);\n\n\tconst endRow = (\n\t\t<TableRow>\n\t\t\t<TableCell component='th' scope='row'>\n\t\t\t\t{isEncryption ? 'CT' : 'PT'}\n\t\t\t</TableCell>\n\t\t\t{endStr.split('').map((v, i) => (\n\t\t\t\t<TableCell key={v + i} align='center'>\n\t\t\t\t\t{v}\n\t\t\t\t</TableCell>\n\t\t\t))}\n\t\t</TableRow>\n\t);\n\n\tconst middleRow = middleNumbersArr && (\n\t\t<TableRow>\n\t\t\t<TableCell component='th' scope='row'>\n\t\t\t\tk\n\t\t\t</TableCell>\n\t\t\t{middleNumbersArr.map((v, i) => (\n\t\t\t\t<TableCell key={v + '-' + i} align='center'>\n\t\t\t\t\t{v}\n\t\t\t\t</TableCell>\n\t\t\t))}\n\t\t</TableRow>\n\t);\n\n\treturn (\n\t\t<>\n\t\t\t<TableContainer component={(props) => <Paper variant='outlined' {...props} />}>\n\t\t\t\t<Table>\n\t\t\t\t\t<TableBody>\n\t\t\t\t\t\t{startRow}\n\t\t\t\t\t\t{startNumbers}\n\t\t\t\t\t\t{middleRow}\n\t\t\t\t\t\t{endNumbers}\n\t\t\t\t\t\t{endRow}\n\t\t\t\t\t</TableBody>\n\t\t\t\t</Table>\n\t\t\t</TableContainer>\n\t\t</>\n\t);\n}\n\nexport default KryptoTable;\n","import { useState } from 'react';\nimport {\n\tTypography,\n\tBox,\n\tFormControl,\n\tInputLabel,\n\tSelect,\n\tMenuItem,\n\tCard,\n} from '@material-ui/core';\nimport TextField from '@material-ui/core/TextField';\nimport { getLetter, getCode } from 'utils/numHelpers';\n\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\n\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\n\nfunction WordAndSolution({ startStr = '', endStr = '' }) {\n\tconst boxCenterProps = { display: 'flex', justifyContent: 'space-around', alignItems: 'center' };\n\treturn (\n\t\t<Card variant='outlined'>\n\t\t\t<Box p={2} {...boxCenterProps}>\n\t\t\t\t<Box flex={9} {...boxCenterProps}>\n\t\t\t\t\t<Typography variant='h4'>{startStr}</Typography>\n\t\t\t\t</Box>\n\t\t\t\t<Box flex={1} {...boxCenterProps}>\n\t\t\t\t\t<ArrowForwardIcon />\n\t\t\t\t</Box>\n\t\t\t\t<Box flex={9} {...boxCenterProps}>\n\t\t\t\t\t<Typography variant='h4'>{endStr}</Typography>\n\t\t\t\t</Box>\n\t\t\t</Box>\n\t\t</Card>\n\t);\n}\n\nexport default WordAndSolution;\n","import { Typography, Box } from '@material-ui/core';\r\n\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\n\r\nfunction LineForLetter({ letter, resultLetter, children }) {\r\n\treturn (\r\n\t\t<Box display='flex' alignItems='center'>\r\n\t\t\t<Box m={2}>{letter}</Box>\r\n\t\t\t<ArrowForwardIcon fontSize='small' />\r\n\t\t\t<Box m={2}>{children}</Box>\r\n\t\t\t<ArrowForwardIcon fontSize='small' />\r\n\t\t\t<Box m={2}>{resultLetter}</Box>\r\n\t\t</Box>\r\n\t);\r\n}\r\n\r\nexport default LineForLetter;\r\n","import { getLetter, getCode, mod } from 'utils/numHelpers';\r\n\r\nimport LineForLetter from 'utils/line-for-letter/LineForLetter';\r\n\r\nfunction SolutionPerChar({ letter, keyValue: key, isEncryption: isEncr }) {\r\n\tconst letterCode = getCode(letter);\r\n\tconst letterAndCode = isEncr ? letterCode + key : letterCode - key;\r\n\tconst afterMod = mod(letterAndCode, 26);\r\n\treturn (\r\n\t\t<LineForLetter letter={letter} resultLetter={getLetter(afterMod)}>\r\n\t\t\t{isEncr ? 'y' : 'x'} = {isEncr ? 'e' : 'd'}\r\n\t\t\t<sub>{key}</sub>({letterCode}) = ({letterCode} {isEncr ? '+' : '-'} {key}) mod 26 ={' '}\r\n\t\t\t{letterAndCode} mod 26 = {afterMod}\r\n\t\t</LineForLetter>\r\n\t);\r\n}\r\n\r\nexport default SolutionPerChar;\r\n","import { useState } from 'react';\r\nimport { Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { getLetter, getCode } from 'utils/numHelpers';\r\nimport KryptoTable from 'utils/KryptoTable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport WordAndSolution from 'utils/WordAndSolution';\r\nimport LineForLetter from 'utils/line-for-letter/LineForLetter';\r\nimport SolutionPerChar from './SolutionPerChar';\r\n\r\nfunction Cezar() {\r\n\tconst [word, setWord] = useState('kryptografia');\r\n\tconst [key, setKey] = useState(0);\r\n\tconst [isEncrypt, setIsEncrypt] = useState(true);\r\n\r\n\tconst cezarEncrypt = () => {\r\n\t\tlet crypted = '';\r\n\t\tlet newKey = parseInt(key * (isEncrypt ? 1 : -1)) || 0;\r\n\t\tfor (let c of word) {\r\n\t\t  crypted += getLetter(getCode(c) + newKey);\r\n\t\t}\r\n\t\treturn crypted;\r\n\t}\r\n\r\n\tlet result = cezarEncrypt();\r\n\t\r\n\tconst changeKey = (event) => setKey(Number(event.target.value));\r\n\tconst changeIsEncryption = (event) => setIsEncrypt(event.target.value);\r\n\tconst changeWord = (event) => setWord(event.target.value);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box my={4}>\r\n\t\t\t\t<Paper elevation={3}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t\t\t<TextField label='word' onChange={changeWord} value={word} />\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t\t<InputLabel>Which way</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<Select value={isEncrypt} onChange={changeIsEncryption}>\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={true}>Encrypt</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={false}>Decrypt</MenuItem>\r\n\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<TextField label='key' type='number' onChange={changeKey} value={key} />\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<Typography variant='h4'>Solution:</Typography>\r\n\t\t\t\t\t\t<WordAndSolution startStr={word} endStr={result || ''} />\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<Typography variant='h4'>Table:</Typography>\r\n\t\t\t\t\t\t<KryptoTable startStr={word} endStr={result} isEncryption={isEncrypt} />\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<Typography variant='h4'>Letter by letter:</Typography>\r\n\t\t\t\t\t\t{word.split('').map((c, i) => (\r\n\t\t\t\t\t\t\t<SolutionPerChar key={c + i} letter={c} keyValue={key} isEncryption={isEncrypt} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Paper>\r\n\t\t\t</Box>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Cezar;\r\n","import { useState } from 'react';\r\nimport { Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { getLetter, getCode, mod, modInverse } from 'utils/numHelpers';\r\nimport KryptoTable from 'utils/KryptoTable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { methods } from 'App';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport LineForLetter from 'utils/line-for-letter/LineForLetter';\r\n\r\nfunction SolutionPerChar({ letter, keyValue, isEncryption: isEncr }) {\r\n\tconst letterCode = getCode(letter);\r\n\tconst keyCode = getCode(keyValue);\r\n\r\n\tconst letterAndKey = isEncr ? letterCode + keyCode : letterCode - keyCode;\r\n\r\n\tconst afterMod = mod(letterAndKey, 26);\r\n\r\n\treturn (\r\n\t\t<LineForLetter letter={letter} resultLetter={getLetter(afterMod)}>\r\n\t\t\t{isEncr ? 'y' : 'x'} = {isEncr ? 'e' : 'd'}\r\n\t\t\t<sub>({keyValue})</sub>({letterCode}) = ({letterCode} {isEncr ? '+' : '-'} {keyCode}) mod 26 ={' '}\r\n\t\t\t{letterAndKey} mod 26 = {afterMod}\r\n\t\t</LineForLetter>\r\n\t);\r\n}\r\n\r\nexport default SolutionPerChar;\r\n","import { useState, useMemo } from 'react';\r\nimport { Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { getLetter, getCode, mod } from 'utils/numHelpers';\r\nimport KryptoTable from '../utils/KryptoTable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport WordAndSolution from 'utils/WordAndSolution';\r\nimport SolutionPerChar from './SolutionPerChar';\r\n\r\nfunction Vigener() {\r\n\tconst [word, setWord] = useState('kryptografia');\r\n\tconst [key, setKey] = useState('');\r\n\tconst [isEncrypt, setIsEncrypt] = useState(true);\r\n\r\n\tconst vigenerEncrypt = () => {\r\n\t\tconst length = key?.length || 0;\r\n\t\tif (length) {\r\n\t\t\tlet crypted = '';\r\n\t\t\tfor (let i in word) {\r\n\t\t\t\tconst c = word[i];\r\n\t\t\t\tconst k = key[i % length];\r\n\t\t\t\tcrypted += getLetter(mod(getCode(c) + getCode(k) * (isEncrypt ? 1 : -1)));\r\n\t\t\t}\r\n\t\t\treturn crypted;\r\n\t\t} else return word;\r\n\t};\r\n\r\n\tlet result = vigenerEncrypt();\r\n\r\n\tconst changeKey = (event) => setKey(event.target.value);\r\n\tconst changeIsEncryption = (event) => setIsEncrypt(event.target.value);\r\n\tconst changeWord = (event) => setWord(event.target.value);\r\n\r\n\tconst middleTableRow = useMemo(() => {\r\n\t\tif (word && key) {\r\n\t\t\tconst arr = [];\r\n\t\t\tword.split('').forEach((v, i) => arr.push(key[i % key.length]));\r\n\t\t\treturn arr.map((v) => getCode(v));\r\n\t\t} else {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t}, [word, key]);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box my={4}>\r\n\t\t\t\t<Paper elevation={3}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t\t\t<TextField label='word' onChange={changeWord} value={word} />\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t\t<InputLabel>Which way</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<Select value={isEncrypt} onChange={changeIsEncryption}>\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={true}>Encrypt</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={false}>Decrypt</MenuItem>\r\n\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<TextField label='key' type='text' onChange={changeKey} value={key} />\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<Typography variant='h4'>Solution:</Typography>\r\n\t\t\t\t\t\t<WordAndSolution startStr={word} endStr={result || ''} />\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<Typography variant='h4'>Table:</Typography>\r\n\t\t\t\t\t\t<KryptoTable\r\n\t\t\t\t\t\t\tstartStr={word}\r\n\t\t\t\t\t\t\tendStr={result}\r\n\t\t\t\t\t\t\tmiddleNumbersArr={middleTableRow}\r\n\t\t\t\t\t\t\tisEncryption={isEncrypt}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t{key && (\r\n\t\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t\t<Typography variant='h4'>Letter by letter:</Typography>\r\n\t\t\t\t\t\t\t{word.split('').map((c, i) => (\r\n\t\t\t\t\t\t\t\t<SolutionPerChar\r\n\t\t\t\t\t\t\t\t\tkey={c + i}\r\n\t\t\t\t\t\t\t\t\tletter={c}\r\n\t\t\t\t\t\t\t\t\tkeyValue={key[i % key.length]}\r\n\t\t\t\t\t\t\t\t\tisEncryption={isEncrypt}\r\n\t\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t)}\r\n\t\t\t\t</Paper>\r\n\t\t\t</Box>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Vigener;\r\n","import { useState } from 'react';\r\nimport { Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { getLetter, getCode, mod, modInverse } from 'utils/numHelpers';\r\nimport KryptoTable from 'utils/KryptoTable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { methods } from 'App';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport LineForLetter from 'utils/line-for-letter/LineForLetter';\r\n\r\nfunction SolutionPerChar({ letter, a, b, isEncryption: isEncr }) {\r\n\tconst letterCode = getCode(letter);\r\n\r\n\tlet code;\r\n\tlet invertedA = NaN;\r\n\tlet calculationJsx;\r\n\tif (!isEncr) {\r\n\t\tinvertedA = modInverse(a, 26);\r\n\t\tcode = invertedA * (letterCode - b);\r\n\t\tcalculationJsx = (\r\n\t\t\t<>\r\n\t\t\t\t{invertedA} * ({letterCode} - {b})\r\n\t\t\t</>\r\n\t\t);\r\n\t} else {\r\n\t\tcode = letterCode * a + b;\r\n\t\tcalculationJsx = (\r\n\t\t\t<>\r\n\t\t\t\t{a} * ({letterCode} + {b})\r\n\t\t\t</>\r\n\t\t);\r\n\t}\r\n\r\n\tconst afterMod = mod(code, 26);\r\n\r\n\treturn (\r\n\t\t<LineForLetter letter={letter} resultLetter={getLetter(afterMod)}>\r\n\t\t\t{isEncr ? 'y' : 'x'} = {isEncr ? 'e' : 'd'}\r\n\t\t\t<sub>\r\n\t\t\t\t({a},{b})\r\n\t\t\t</sub>\r\n\t\t\t({letterCode}) = ({calculationJsx}) mod 26 = {code} mod 26 = {afterMod}\r\n\t\t</LineForLetter>\r\n\t);\r\n}\r\n\r\nexport default SolutionPerChar;\r\n","import { useState } from 'react';\r\nimport { Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { getLetter, getCode, mod, modInverse } from 'utils/numHelpers';\r\nimport KryptoTable from 'utils/KryptoTable';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { methods } from 'App';\r\nimport ArrowForwardIcon from '@material-ui/icons/ArrowForward';\r\nimport LineForLetter from 'utils/line-for-letter/LineForLetter';\r\n\r\nconst getStepsForInverseKey = (num) => {\r\n\tconst results = [];\r\n\tfor (let i = 0; i < 26; i++) {\r\n\t\tresults.push(`${num} * ${i} mod 26 = ${mod(num * i, 26)}`);\r\n\t\tif ((num * i) % 26 === 1) {\r\n\t\t\tresults.push('Found inverted key = ' + i);\r\n\t\t\treturn results;\r\n\t\t}\r\n\t}\r\n\treturn results;\r\n};\r\n\r\nfunction AfinicznyKluczLiczenie({ a }) {\r\n\tconst steps = getStepsForInverseKey(a);\r\n\treturn steps.map((step) => (\r\n\t\t<Box key={step}>\r\n\t\t\t<Typography>{step}</Typography>\r\n\t\t</Box>\r\n\t));\r\n}\r\n\r\nexport default AfinicznyKluczLiczenie;\r\n","import { useState } from 'react';\r\n\r\nimport { Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { getLetter, getCode, modInverse, mod } from 'utils/numHelpers';\r\nimport KryptoTable from '../utils/KryptoTable';\r\nimport WordAndSolution from 'utils/WordAndSolution';\r\nimport SolutionPerChar from './SolutionPerChar';\r\nimport AfinicznyKluczLiczenie from './AfinicznyKluczLiczenie';\r\n\r\nconst affine = (word, [a, b], isEncode = true) => {\r\n\tlet result = '';\r\n\tlet code = null;\r\n\r\n\tfor (let c of word) {\r\n\t\tif (!isEncode) {\r\n\t\t\tconst newA = modInverse(a, 26);\r\n\t\t\tcode = newA * (getCode(c) - b);\r\n\t\t} else code = getCode(c) * a + b;\r\n\r\n\t\tresult += getLetter(mod(code, 26));\r\n\t}\r\n\r\n\treturn result;\r\n};\r\n\r\nfunction Afiniczny() {\r\n\tconst [word, setWord] = useState('kryptografia');\r\n\tconst [keys, setKeys] = useState('');\r\n\tconst [isEncrypt, setIsEncrypt] = useState(true);\r\n\r\n\tconst [a = 0, b = 0] = keys.replace(/\\s/, '').split(',').map(Number);\r\n\r\n\tconst result = word && a !== undefined && b !== undefined ? affine(word, [a, b], isEncrypt) : '';\r\n\r\n\tconst changeWord = (event) => setWord(event.target.value);\r\n\tconst changeKey = (event) => setKeys(event.target.value);\r\n\tconst changeIsEncryption = (e, v) => setIsEncrypt(e.target.value);\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t<Box my={4}>\r\n\t\t\t\t<Paper elevation={3}>\r\n\t\t\t\t\t<Grid container>\r\n\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t\t\t<TextField label='word' onChange={changeWord} value={word} />\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t\t<Grid item xs={6}>\r\n\t\t\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t\t\t\t<InputLabel>Which way</InputLabel>\r\n\t\t\t\t\t\t\t\t\t<Select value={isEncrypt} onChange={changeIsEncryption}>\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={true}>Encrypt</MenuItem>\r\n\t\t\t\t\t\t\t\t\t\t<MenuItem value={false}>Decrypt</MenuItem>\r\n\t\t\t\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t\t\t\t</FormControl>\r\n\t\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t\t</Grid>\r\n\t\t\t\t\t</Grid>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<TextField\r\n\t\t\t\t\t\t\tlabel='keys'\r\n\t\t\t\t\t\t\tplaceholder={'3,7'}\r\n\t\t\t\t\t\t\ttype='text'\r\n\t\t\t\t\t\t\tonChange={changeKey}\r\n\t\t\t\t\t\t\tvalue={keys}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<Typography variant='h4'>Solution:</Typography>\r\n\t\t\t\t\t\t<WordAndSolution startStr={word} endStr={result} />\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<Typography variant='h4'>Table:</Typography>\r\n\t\t\t\t\t\t<KryptoTable startStr={word} endStr={result} isEncryption={isEncrypt} />\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t\t{!isEncrypt && (\r\n\t\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t\t<Typography variant='h4'>Klucz odwrócony:</Typography>\r\n\t\t\t\t\t\t\t<AfinicznyKluczLiczenie a={a} />\r\n\t\t\t\t\t\t</Box>\r\n\t\t\t\t\t)}\r\n\r\n\t\t\t\t\t<Box p={2}>\r\n\t\t\t\t\t\t<Typography variant='h4'>Letter by letter:</Typography>\r\n\r\n\t\t\t\t\t\t{word.split('').map((c, i) => (\r\n\t\t\t\t\t\t\t<SolutionPerChar key={c + i} letter={c} a={a} b={b} isEncryption={isEncrypt} />\r\n\t\t\t\t\t\t))}\r\n\t\t\t\t\t</Box>\r\n\t\t\t\t</Paper>\r\n\t\t\t</Box>\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default Afiniczny;\r\n","import { useState } from 'react';\r\nimport './App.css';\r\nimport Container from '@material-ui/core/Container';\r\nimport { Typography, Box, FormControl, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport Cezar from './cezar/Cezar';\r\nimport Vigener from './vigener/Vigener';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport Afiniczny from './afiniczny/Afiniczny';\r\n\r\nexport const methods = {\r\n\tcezar: 'c',\r\n\tafiniczny: 'a',\r\n\tvigenera: 'v',\r\n\thila: 'h',\r\n};\r\n\r\nfunction App() {\r\n\tconst [method, setMetod] = useState(methods.cezar);\r\n\r\n\tconst handleChange = (event) => {\r\n\t\tsetMetod(event.target.value);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<Container maxWidth='md'>\r\n\t\t\t<Box my={4}>\r\n\t\t\t\t<Typography variant='h2'>Kryptobreaker:</Typography>\r\n\t\t\t</Box>\r\n\t\t\t<Paper elevation={3}>\r\n\t\t\t\t<Box\r\n\t\t\t\t\tp={2}\r\n\t\t\t\t\tdisplay='flex'\r\n\t\t\t\t\talignContent='center'\r\n\t\t\t\t\tjustifyItems='center'\r\n\t\t\t\t\tjustifyContent='center'\r\n\t\t\t\t>\r\n\t\t\t\t\t<FormControl>\r\n\t\t\t\t\t\t<InputLabel>Metoda</InputLabel>\r\n\t\t\t\t\t\t<Select value={method} onChange={handleChange}>\r\n\t\t\t\t\t\t\t<MenuItem value={methods.cezar}>Cezara</MenuItem>\r\n\t\t\t\t\t\t\t<MenuItem value={methods.afiniczny}>Afiniczny</MenuItem>\r\n\t\t\t\t\t\t\t<MenuItem value={methods.vigenera}>Vigenera</MenuItem>\r\n\t\t\t\t\t\t\t<MenuItem value={methods.hila}>Hila</MenuItem>\r\n\t\t\t\t\t\t</Select>\r\n\t\t\t\t\t</FormControl>\r\n\t\t\t\t</Box>\r\n\t\t\t</Paper>\r\n\t\t\t<Box m={4} display='flex' alignContent='center' justifyItems='center' justifyContent='center'>\r\n\t\t\t\t<ArrowDownwardIcon />\r\n\t\t\t</Box>\r\n\t\t\t<Box my={4}>{method === methods.cezar && <Cezar />}</Box>\r\n\t\t\t<Box my={4}>{method === methods.afiniczny && <Afiniczny />}</Box>\r\n\t\t\t<Box my={4}>{method === methods.vigenera && <Vigener />}</Box>\r\n\t\t</Container>\r\n\t);\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}